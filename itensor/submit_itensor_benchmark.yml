#!/usr/bin/env -S cluster_jobs.py submit
# requires that `model_custom.py` can be imported.

job_config:
    class: SlurmSequentialJob # JobConfig = run locally; SlurmJob = submit to slurm; SGEJob = submit to SGE
    jobname: itensor_benchmark
    task:  # specify what your job actually does
        type: CommandCall
        command: julia
        command_line_args:
          - "--"
          - julia_file: "${{PROJECT_DIR}}/itensor/{0!s}"
          - "--blas_num_threads"
          - blas_num_threads: "{0:d}"
          - "--conserve_qns"
          - conserve: "{0:d}"
          - "--max_seconds"
          - max_seconds: "{0:d}"
          - "--output_filename"
          - output_filename:
        shell: True

    # script_template: slurm_benchmark_threads.sh  # select from cluster_templates/
    # script_template: slurm_benchmark_threads.sh  # select from cluster_templates/
    # script_template: slurm.sh  # select from cluster_templates/
    # script_template: slurm_no_hyperthread.sh  # select from cluster_templates/
    # # adjust the following lines to tell the cluster the resource requirements
    requirements_slurm:
        time: '0-12:00:00'  # d-hh:mm:ss
        mem: '30G'
        partition: 'cpu'
        # qos: 'short'
        nodes: 1
        cpus-per-task: 8
        mail-type: "FAIL"  # be mindful with this if you submit a lot of jobs...
        # see also cluster_templates/slurm.sh
        nodelist: "anderson[01-24]"
    # options:
        # environment_setup: |
        #     source "${PROJECT_DIR}/env_pip/bin/activate"
        # environment_setup: |
        #     eval "$(micromamba shell hook --shell bash )"
        #     micromamba activate "${PROJECT_DIR}/env_conda"
        #     # export TENPY_OPTIMIZE=3
        # environment_setup: |
        #     eval "$(micromamba shell hook --shell bash )"
        #     micromamba activate "${PROJECT_DIR}/env_conda_global"

    change_parameters:
        expansion: product  # product or zip
        recursive_keys:
            # note that these get added to the filename automatically
            # - algorithm_params.trunc_params.chi_max
            - blas_num_threads
            - conserve

        format_strs:  # this allows formatting of output_filename
            - 'nthreads_{0:02d}'
            - 'conserve_{0!r}'
        output_filename:
            key: output_filename
            prefix: 'timings'
            suffix: '.out'


julia_file: run_tenpy_comparison.jl
blas_num_threads: [1, 4]
conserve: [True, False]
max_seconds: 3600
